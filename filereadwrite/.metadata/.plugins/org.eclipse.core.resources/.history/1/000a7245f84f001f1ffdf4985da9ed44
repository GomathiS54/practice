package com.example.files.Controller;

import com.example.files.Dto.EmployeeDto;
import com.example.files.Dto.EmployeeList;
import com.example.files.Service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/employees")
public class EmployeeController {

    private final EmployeeService employeeService;

    @Autowired
    public EmployeeController(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }

    @GetMapping
    public ResponseEntity<EmployeeList> getAllEmployees() {
        EmployeeList employees = employeeService.findAll();
        return new ResponseEntity<>(employees, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<EmployeeDto> getEmployeeById(@PathVariable Long id) {
        EmployeeDto employee = employeeService.findById(id);
        if (employee != null) {
            return new ResponseEntity<>(employee, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/write")
    public ResponseEntity<String> saveEmployeesToFile(@RequestBody List<EmployeeDto> employees, @RequestParam String filePath) {
        try {
            employeeService.saveToFile(employees, filePath);
            return new ResponseEntity<>("Employees saved successfully!", HttpStatus.OK);
        } catch (IOException e) {
            return new ResponseEntity<>("Failed to save employees: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/read")
    public ResponseEntity<List<EmployeeDto>> readEmployeesFromFile(@RequestParam String filePath) {
        try {
            List<EmployeeDto> employees = employeeService.readFromFile(filePath);
            return new ResponseEntity<>(employees, HttpStatus.OK);
        } catch (IOException e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
